# React 最佳实践

## 组件结构
- 使用函数式组件而非类组件
- 保持组件精简且专注
- 将可复用逻辑提取到自定义 hooks 中
- 使用组合而非继承
- 使用 TypeScript 实现合适的 prop 类型
- 将大型组件拆分为更小、更专注的组件

## Hooks
- 遵循 Hooks 规则
- 使用自定义 hooks 实现可复用逻辑
- 保持 hooks 专注且简洁
- 在 useEffect 中使用合适的依赖数组
- 必要时在 useEffect 中实现清理
- 避免嵌套 hooks

## 状态管理
- 使用 useState 保存组件本地状态
- 实现 useReducer 处理复杂的状态逻辑
- 使用 Context API 保存共享状态
- 尽可能将状态保持在靠近使用位置的位置
- 通过合理的状态管理避免 prop 钻取
- 仅在必要时使用状态管理库

## 性能
- 实现合适的 memoization（useMemo、useCallback）
- 对开销较大的组件使用 React.memo
- 避免不必要的重新渲染
- 实现合适的延迟加载
- 使用列表中的正确关键属性
- 分析并优化渲染性能

## 表单
- 使用受控组件进行表单输入
- 实现正确的表单验证
- 正确处理表单提交状态
- 显示合适的加载和错误状态
- 使用表单库处理复杂表单
- 实现正确的表单可访问性

## 错误处理
- 实现错误边界
- 正确处理异步错误
- 显示用户友好的错误消息
- 实现正确的回退 UI
- 正确记录错误
- 优雅地处理边缘情况

## 测试
- 为组件编写单元测试
- 为复杂流程实现集成测试
- 使用 React 测试库
- 测试用户交互
- 测试错误场景
- 实现正确的模拟数据

## 可访问性
- 使用语义化的 HTML 元素
- 实现正确的 ARIA 属性
- 确保键盘导航
- 使用屏幕阅读器进行测试
- 处理焦点管理
- 为图像提供正确的 alt 文本

## 代码组织
- 将相关组件组合在一起
- 使用正确的文件命名约定
- 实现正确的目录结构
- 将样式保持在组件附近
- 使用正确的导入/导出
- 记录复杂的组件逻辑

## 项目介绍

这是一个图片工具，整体应用风格类似一个 vscode 编辑器，有标题栏、侧边栏、以及功能部分。